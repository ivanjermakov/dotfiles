#!/usr/bin/env python3
import sys
import subprocess

a2dp_profile = 'a2dp-sink'
hfp_profile = 'headset-head-unit'

def get_card_ids():
    cmd = "pactl list cards | grep Card | awk '{print substr($2,2)}'"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0].decode().strip().split('\n')
    return output


def get_sink_ids():
    cmd = "pactl list sinks | grep -P 'Sink #' | awk '{print substr($2,2)}'"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0].decode().strip().split('\n')
    return output


def set_internal():
    subprocess.run(['pactl', 'set-card-profile', get_card_ids()[0], internal_profile]) 
    subprocess.run(['pactl', 'set-default-sink', get_sink_ids()[0]])
    subprocess.run(['pactl', 'set-sink-port', 'alsa_output.pci-0000_00_1f.3.analog-stereo', 'analog-output-headphones']) 
    subprocess.run(['pactl', 'set-source-port', 'alsa_input.pci-0000_00_1f.3.analog-stereo', 'analog-input-headset-mic'])
    print('Using internal audio')


def set_external():
    subprocess.run(['pactl', 'set-card-profile', get_card_ids()[0], external_profile]) 
    subprocess.run(['pactl', 'set-default-sink', get_sink_ids()[0]])
    print('Using external audio')


def set_a2dp():
    if get_sink_ids()[1]:
        subprocess.run(['pactl', 'set-card-profile', get_card_ids()[1], a2dp_profile]) 
        subprocess.run(['pactl', 'set-default-sink', get_sink_ids()[1]])
        print('Using a2dp audio')
    else:
        print('No second sink')


def set_hfp():
    if get_sink_ids()[1]:
        subprocess.run(['pactl', 'set-card-profile', get_card_ids()[1], hfp_profile]) 
        subprocess.run(['pactl', 'set-default-sink', get_sink_ids()[1]])
        print('Using hfp audio')
    else:
        print('No second sink')


def get_active_profile():
    cmd = "pactl list cards | grep Active | awk '{print $3}'"
    ps = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)
    output = ps.communicate()[0].decode('utf-8').replace('\n', '')
    return output

def usage():
    print("""usage: audio <mode>

Switch audio device

Supported modes:
   i   internal
   e   external
   h   HFP (bluetooth with mic)
   a   A2DP (bluetooth good quality)""")

args = sys.argv
if not (len(args) >= 2 and (args[1] in ['i', 'e', 't', 'a', 'h'])):
    usage()
    exit()
if args[1] == 'i':
    set_internal()
elif args[1] == 'e':
    set_external()
elif args[1] == 'a':
    set_a2dp()
elif args[1] == 'h':
    set_hfp()
